/* part of the xml parsing
   if you want to use this xml parsing, the api version should 19 or over 
*/
package com.example.songmyungjin.xml_parsing;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {

    EditText edit;
    TextView text;

    private int i = 1;

    XmlPullParser xpp;
    String key = "14edc60c0e7b279c16e4d0c7950a8c22";

    String data;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        edit = (EditText) findViewById(R.id.edit);
        text = (TextView) findViewById(R.id.text);
    }

    public void mOnClick(View v) {


        switch( v.getId() ){

            case R.id.button:



                //Android 4.0 이상 부터는 네트워크를 이용할 때 반드시 Thread 사용해야 함

                new Thread(new Runnable() {



                    @Override

                    public void run() {

                        // TODO Auto-generated method stub

                        data= getXmlData(); //아래 메소드를 호출하여 XML data를 파싱해서 String 객체로 얻어오기
                        //UI Thread(Main Thread)를 제외한 어떤 Thread도 화면을 변경할 수 없기때문에
                        //runOnUiThread()를 이용하여 UI Thread가 TextView 글씨 변경하도록 함
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                text.setText(data);  //TextView에 문자열  data 출력
                            }
                        });
                    }
                }).start();
                break;
        }
    }//mOnClick method..

     String getXmlData() {



         StringBuffer buffer=new StringBuffer();
         String str= edit.getText().toString(); //EditText에 작성된 Text얻어오기
         String location = URLEncoder.encode(str); //한글의 경우 인식이 안되기에 utf-8 방식으로 encoding..

             String queryUrl = "https://apis.daum.net/local/v1/search/keyword.xml"
                     + "?query=" + location
                     + "&apikey=" + key
                     + "&page=1" + "&location="
                     + "37.4945667,127.0279374"
                     + "&sort=1";

         try {
             URL url= new URL(queryUrl); //문자열로 된 요청 url을 URL 객체로 생성.
             InputStream is= url.openStream();  //url위치로 입력스트림 연결
             XmlPullParserFactory factory= XmlPullParserFactory.newInstance();
             XmlPullParser xpp= factory.newPullParser();
             xpp.setInput( new InputStreamReader(is, "UTF-8") );  //inputstream 으로부터 xml 입력받기

             String tag;

             xpp.next();
             int eventType= xpp.getEventType();

             while( eventType != XmlPullParser.END_DOCUMENT ){

                 switch( eventType ){

                     case XmlPullParser.START_DOCUMENT:

                         buffer.append("start NAVER XML parsing...\n\n");

                         break;



                     case XmlPullParser.START_TAG:

                         tag= xpp.getName();    //테그 이름 얻어오기



                         if(tag.equals("item")) ;// 첫번째 검색결과

                         else if(tag.equals("title")){

                             buffer.append("업소명 : ");

                             xpp.next();

                             buffer.append(xpp.getText()); //title 요소의 TEXT 읽어와서 문자열버퍼에 추가

                             buffer.append("\n");          //줄바꿈 문자 추가

                         }

                         else if(tag.equals("category")){

                             buffer.append("업종 : ");

                             xpp.next();

                             buffer.append(xpp.getText()); //category 요소의 TEXT 읽어와서 문자열버퍼에 추가

                             buffer.append("\n");          //줄바꿈 문자 추가

                         }

                         else if(tag.equals("phone")){

                             buffer.append("연락처 :");

                             xpp.next();

                             buffer.append(xpp.getText()); //telephone 요소의 TEXT 읽어와서 문자열버퍼에 추가

                             buffer.append("\n");          //줄바꿈 문자 추가

                         }

                         else if(tag.equals("address")){

                             buffer.append("주소 :");

                             xpp.next();

                             buffer.append(xpp.getText()); //address 요소의 TEXT 읽어와서 문자열버퍼에 추가

                             buffer.append("\n");          //줄바꿈 문자 추가

                         }

                         else if(tag.equals("latitude")){

                             buffer.append("지도 위치 X :");

                             xpp.next();

                             buffer.append(xpp.getText()); //mapx 요소의 TEXT 읽어와서 문자열버퍼에 추가

                             buffer.append("  ,  ");          //줄바꿈 문자 추가

                         }

                         else if(tag.equals("longitude")){

                             buffer.append("지도 위치 Y :");

                             xpp.next();

                             buffer.append(xpp.getText()); //mapy 요소의 TEXT 읽어와서 문자열버퍼에 추가

                             buffer.append("\n");          //줄바꿈 문자 추가

                         }
                         break;
                     case XmlPullParser.TEXT:
                         break;
                     case XmlPullParser.END_TAG:
                         tag= xpp.getName();    //테그 이름 얻어오기
                         if(tag.equals("item")) buffer.append("\n"); // 첫번째 검색결과종료..줄바꿈
                         break;
                 }
                 eventType= xpp.next();
             }
         } catch (Exception e) {
             // TODO Auto-generated catch block
             e.printStackTrace();
         }

         buffer.append("end Daum Local API XML parsing...\n");
         return buffer.toString(); //StringBuffer 문자열 객체 반환

     }//getXmlData method....


    }
   
